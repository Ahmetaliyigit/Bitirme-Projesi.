// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ÜrünKıyafetler;

#nullable disable

namespace ÜrünKıyafetler.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250205114502_CrateFabricandGender")]
    partial class CrateFabricandGender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ÜrünKıyafetler.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Fabric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fabrics");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Jacket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("FabricId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Hood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pocket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FabricId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("Jackets");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Pants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("FabricId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Waistsize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FabricId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("pants");
                });

            modelBuilder.Entity("ÜrünKıyafetler.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Shirt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Collar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("FabricId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sleve")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FabricId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("Shirts");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Tshirt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Collar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("FabricId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sleve")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FabricId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProductColorId");

                    b.ToTable("Tshirts");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Jacket", b =>
                {
                    b.HasOne("ÜrünKıyafetler.Brand", "Brand")
                        .WithMany("Jackets")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Condition", "Condition")
                        .WithMany("Jackets")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Fabric", "Fabric")
                        .WithMany("Jackets")
                        .HasForeignKey("FabricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Gender", "Gender")
                        .WithMany("Jackets")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.ProductColor", "ProductColor")
                        .WithMany("Jackets")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Condition");

                    b.Navigation("Fabric");

                    b.Navigation("Gender");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Pants", b =>
                {
                    b.HasOne("ÜrünKıyafetler.Brand", "Brand")
                        .WithMany("pants")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Condition", "Condition")
                        .WithMany("pants")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Fabric", "Fabric")
                        .WithMany("pants")
                        .HasForeignKey("FabricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Gender", "Gender")
                        .WithMany("pants")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.ProductColor", "ProductColor")
                        .WithMany("pants")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Condition");

                    b.Navigation("Fabric");

                    b.Navigation("Gender");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Shirt", b =>
                {
                    b.HasOne("ÜrünKıyafetler.Brand", "Brand")
                        .WithMany("Shirts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Condition", "Condition")
                        .WithMany("Shirts")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Fabric", "Fabric")
                        .WithMany("Shirts")
                        .HasForeignKey("FabricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Gender", "Gender")
                        .WithMany("Shirts")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.ProductColor", "ProductColor")
                        .WithMany("Shirts")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Condition");

                    b.Navigation("Fabric");

                    b.Navigation("Gender");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Tshirt", b =>
                {
                    b.HasOne("ÜrünKıyafetler.Brand", "Brand")
                        .WithMany("Tshirts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Condition", "Condition")
                        .WithMany("Tshirts")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Fabric", "Fabric")
                        .WithMany("Tshirts")
                        .HasForeignKey("FabricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.Gender", "Gender")
                        .WithMany("Tshirts")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ÜrünKıyafetler.ProductColor", "ProductColor")
                        .WithMany("Tshirts")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Condition");

                    b.Navigation("Fabric");

                    b.Navigation("Gender");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Brand", b =>
                {
                    b.Navigation("Jackets");

                    b.Navigation("Shirts");

                    b.Navigation("Tshirts");

                    b.Navigation("pants");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Condition", b =>
                {
                    b.Navigation("Jackets");

                    b.Navigation("Shirts");

                    b.Navigation("Tshirts");

                    b.Navigation("pants");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Fabric", b =>
                {
                    b.Navigation("Jackets");

                    b.Navigation("Shirts");

                    b.Navigation("Tshirts");

                    b.Navigation("pants");
                });

            modelBuilder.Entity("ÜrünKıyafetler.Gender", b =>
                {
                    b.Navigation("Jackets");

                    b.Navigation("Shirts");

                    b.Navigation("Tshirts");

                    b.Navigation("pants");
                });

            modelBuilder.Entity("ÜrünKıyafetler.ProductColor", b =>
                {
                    b.Navigation("Jackets");

                    b.Navigation("Shirts");

                    b.Navigation("Tshirts");

                    b.Navigation("pants");
                });
#pragma warning restore 612, 618
        }
    }
}
